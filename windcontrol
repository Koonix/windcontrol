#!/bin/bash
# Ehsan Gh. 2021-05-09
# https://github.com/soystemd

# A fan control script made with simplicity and sucklessness in mind.

# Unlike other fan control programs, this script doesn't change the speed of
# the fans on quick temperature spikes. fans only ramp up (or down)
# if the rise (or fall) of temperature is persistent.

# All configurations should be done by editing and reinstalling the script.


# ================
# = Configuration
# ================

# Temperature sampling interval in seconds:
interval=2
#
# How many intervals should a temperature-rise/fall last
# to cause the fans to rampup/rampdown:
spike_rejection=10
#
# Fans are set to max pwm at the beginning to kickstart them if they are stopped.
# How long (in seconds) to wait for fans to ramp up and kickstart at the beginning?
# 0 means no initial rampup.
rampup_delay=3


# ===========================
# = Configure temp-pwm pairs
# ===========================

# The script checks these temp-pwm pairs from number 1 to the last one,
# and if the current temp is equal or higher than the temp-pwm pair it's checking,
# it will set the fan pwms to the pwms defined in that temp-pwm pair.
#
# however if the current temp is lower than the pair it's checking,
# it will check the next ones until a match is found.
#
# so make sure the last temp-pwm is set to a temp that is always lower than
# your cpu temp (eg. 10 degrees)
#
# Note 1: They have to be sorted by temperature, from highest to lowest.
# Note 2: There are 5 of them here, but you can add as many as you like (for finer control).

# For example, this first temp-pwm pair implies the following:
# If coretemp is 70 degrees celsius or more, set fan pwms to 255 and 255 (max speed).

number=1
# 70 degrees and above:
coretemp_target[$number]=70
pwm_cpu[$number]=200
pwm_case[$number]=200

number=2
# 64 to 79 degrees:
coretemp_target[$number]=64
pwm_cpu[$number]=185
pwm_case[$number]=150

number=3
# 60 to 63 degrees:
coretemp_target[$number]=60
pwm_cpu[$number]=160
pwm_case[$number]=150

number=4
# 55 to 59 degrees:
coretemp_target[$number]=55
pwm_cpu[$number]=130
pwm_case[$number]=142

number=5
# 0 to 54 degrees:
coretemp_target[$number]=0
pwm_cpu[$number]=85
pwm_case[$number]=110


# ====================
# = Kernel file paths
# ====================

# You have to install lm_sensors and enable it's service so
# we can access the pwm controlling function of your computer.

# Figuring these paths out shouldn't be too hard. you can search
# /sys/devices or /sys/class/hwmon for hwmonX/pwm and tempX_input files.

# So find the pwm files by running:
#     $ find /sys/class/hwmon/*/ -name '*temp[0-9]*'
# or: $ find /sys/devices -path '*core*/*temp*'
#
# Similarly find the temperature files by running:
#     $ find /sys/class/hwmon/*/ -name '*pwm*'
# or: $ find /sys/devices -path '*hwmon*/*pwm*'

# You can run the `pwmconfig` command (from the package 'fancontrol') and
# then check the file /etc/fancontrol to figure out these paths.

devices_path="/sys/devices/platform"

coretemp_path="${devices_path}/coretemp.0/hwmon/hwmon1"
file_coretemp="${coretemp_path}/temp2_input"

pwm_path="${devices_path}/it87.656/hwmon/hwmon2"
file_pwm_cpu="${pwm_path}/pwm1"
file_pwm_case="${pwm_path}/pwm2"
file_pwm_aux="${pwm_path}/pwm3"

file_pwm_cpu_enable="${pwm_path}/pwm1_enable"
file_pwm_case_enable="${pwm_path}/pwm2_enable"
file_pwm_aux_enable="${pwm_path}/pwm3_enable"


# ================
# = Main Function
# ================

# Main function; everything is done here.
main ()
{
    # Check for possible errors
    error_checks

    # Take control of fans
    enable_fan_control "$file_pwm_aux_enable"
    enable_fan_control "$file_pwm_cpu_enable"
    enable_fan_control "$file_pwm_case_enable"

    # Kickstart the fans by setting them to max speed,
    # incase any fans are stopped.
    initial_rampup


    # This loop runs forever and everything is handled here.
    while true; do

        # Wait
        sleep "$interval"

        # Divide the raw temp sensor's value by 1000 to get temp in celsius.
        coretemp_raw=$(cat "$file_coretemp")
        coretemp_actual=$((coretemp_raw / 1000))

        i=1
        # Find the coretemp array element (target) that matches coretemp_actual.
        while true; do
            [[ $coretemp_actual -ge ${coretemp_target[$i]} ]] && break
            [[ $i -gt ${#coretemp_target[@]} ]] && i=1 && break
            ((i++))
        done

        # if target is the same as before, reset counter and start over
        [[ ${coretemp_target[$i]} -eq $current_coretemp_target ]]  &&
            numberof_targetDifferent_periods=0 && continue

        # keep count of how many cycles the change in temperature been stable for.
        (( numberof_targetDifferent_periods++ ))

        # if temperature rise has not been stable for long enough, start over.
        [[ $numberof_targetDifferent_periods -lt \
            $spike_rejection ]] && continue

        set_fan_pwm "$file_pwm_cpu" "${pwm_cpu[$i]}"
        set_fan_pwm "$file_pwm_case" "${pwm_case[$i]}"
        current_coretemp_target="${coretemp_target[$i]}"

    done
}


# ============
# = Functions
# ============

# Run some checks and detect errors
error_checks() {
    check_if_already_running
    check_if_all_arrays_same_size
    check_if_pwm_values_in_range "${pwm_case[@]}"
    check_if_pwm_values_in_range "${pwm_cpu[@]}"
    check_if_interval_bigger_than_zero
    check_if_kernel_files_accessible
}


# Ramp up fans at the start for a little while
rampup() {
    set_fan_pwm "$file_pwm_aux" 255
    set_fan_pwm "$file_pwm_cpu" 200
    set_fan_pwm "$file_pwm_case" 250
}


# Rampup and wait a little bit
initial_rampup() {
    [ "$rampup_delay" = 0 ] && return
    rampup
    sleep "$rampup_delay"
}


# Set the given fan to the given pwm
set_fan_pwm() {
    local pwm_file="$1"
    local pwm="$2"
    echo "$pwm" | tee "$pwm_file" > /dev/null 2>&1
}


# Enable fan pwm control
enable_fan_control() {
    local file_pwm_enable="$1"
    echo 1 | tee "$file_pwm_enable" > /dev/null 2>&1
}


# Disable fan pwm control
disable_fan_control() {
    local file_pwm_enable="$1"
    echo 2 | tee "$file_pwm_enable" > /dev/null 2>&1
}


# Check array element count equality
check_if_all_arrays_same_size() {
if [ "${#coretemp_target[@]}" != "${#pwm_cpu[@]}" ] ||\
    [ "${#pwm_cpu[@]}" != "${#pwm_case[@]}" ]
then
    echo "WINDCONTROL ERROR: Imbalance in arrays' element count" >&2 ; exit 1
fi
}


# Check if configured pwm values are between or equal 0 and 255
check_if_pwm_values_in_range() {
    pwm_array=("$@")
    for pwm_value in "${pwm_array[@]}"; do
        if [ "$pwm_value" -gt 255 ] || [ "$pwm_value" -lt 0 ]; then
		    echo "ERROR: PWM Value $pwm_value out of range" >&2 ; exit 1
        fi
    done
}


# Check if interval is greater than 0
check_if_interval_bigger_than_zero() {
	if [ "$interval" -le 0 ]; then
		echo "ERROR: Interval must be at least 1" >&2
		exit 1
	fi
}


# Check if a given file is readable
check_read_access() {
    if [ ! -r "$1" ]; then
		echo "ERROR: Can't access $1" >&2 ; exit 1
    fi
}


# Check if a given file is writable
check_write_access() {
    if [ ! -w "$1" ]; then
		echo "ERROR: Can't access $1" >&2
        echo "Did you sudo?" >&2
        exit 1
    fi
}


# Check if kernel files are accessible
check_if_kernel_files_accessible() {
    check_read_access "$file_coretemp"
    check_write_access "$file_pwm_case"
    check_write_access "$file_pwm_cpu"
    check_write_access "$file_pwm_aux"
}


# Check if windcontrol is already running; if not, make a PID file for it
check_if_already_running() {
    piddir="/var/run"
    pidfile="${piddir}/windcontrol.pid"
    if [ -f "$pidfile" ]; then
	    echo "File $pidfile exists" >&2
	    echo "Windcontrol possibly already running" >&2
    	exit 1
    fi
    check_write_access "$piddir"
    echo $$ > "$pidfile"
}


# Set fans to max upon kill/exit
restore_fans() {
	local status=$1
    echo "Disabling fan control before exiting..."
    rampup
    disable_fan_control "$file_pwm_case_enable"
    disable_fan_control "$file_pwm_aux_enable"
    disable_fan_control "$file_pwm_cpu_enable"
	rm -f "$pidfile"
	exit "$status"
}
# Run the 'restore_fans' functions upon receiving these signals.
trap 'restore_fans 0' SIGQUIT SIGTERM
trap 'restore_fans 1' SIGHUP SIGINT


# Initializing some variables; don't change them
current_coretemp_target="${coretemp_target[1]}"
numberof_targetDifferent_periods=0

# Run the main function
main; exit
